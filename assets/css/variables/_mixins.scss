@mixin resetButton {
    background: none;
    border: 0;
    color: inherit;
    font: inherit;
    line-height: normal;
    overflow: visible;
    -webkit-appearance: button;
    /* for input */
    -webkit-user-select: none;
    /* for button */
    -moz-user-select: none;
    -ms-user-select: none;

    &::-moz-focus-inner {
        border: 0;
        padding: 0;
    }

    &:focus {
        outline: 0;
    }
}
@mixin resetInput {
    border-radius: 0;
    border: none;
    box-shadow: none;
    outline: none;
}
@mixin resetList {
    list-style: none;
    padding: 0;
    margin: 0;
}
@mixin responsiveImage {
    display: block;
    width: 100%;
    height: auto;
}
@mixin font-face($fontName) {
     @font-face{
        font-family: $fontName;
        src: url('../fonts/' + $fontName + '/' + $fontName + '.eot');
        src: url('../fonts/' + $fontName + '/' + $fontName + '.eot?iefix') format('eot'), url('../fonts/' + $fontName + '/' + $fontName + '.woff') format('woff'), url('../fonts/' + $fontName + '/' + $fontName + '.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }
}
@mixin placeholderColor($color) {
    &::-webkit-input-placeholder {
        color: $color;
    }

    &:-moz-placeholder {
        /* Firefox 18- */
        color: $color;
    }

    &::-moz-placeholder {
        /* Firefox 19+ */
        color: $color;
    }

    &:-ms-input-placeholder {
        color: $color;
    }
}
@mixin clearfix {
    &:after {
        content: '';
        display: table;
        clear: both;
    }
}
@mixin pageWidth {
    max-width: $_maxPageWidth;
    margin: 0 auto;
    padding-left: ($_xGutter / 2);
    padding-right: ($_xGutter / 2);
}
@keyframes fade-in {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}
@mixin fade-in($time:$_tShort) {
    animation: fade-in $time linear 1;
}
@mixin inline-image($imgPath, $scale : 0.5, $size : contain) {
    display: inline-block;
    background: inline($imgPath) center center no-repeat;
    background-size: $size;

    &.dimensions {
        $dimensions: map-get($_inlineDimensionsData, $imgPath);
        @if $dimensions {
            &-big {
                width: #{map-get($dimensions, 'width') * $scale}px;
                height: #{map-get($dimensions, 'height') * $scale}px;
            }

            &-medium {
                width: #{map-get($dimensions, 'width') * ($scale / 1.3)}px;
                height: #{map-get($dimensions, 'height') * ($scale / 1.3)}px;
            }

            &-small {
                width: #{map-get($dimensions, 'width') * ($scale / 2)}px;
                height: #{map-get($dimensions, 'height') * ($scale / 2)}px;
            }
        }
    }
}
@mixin inline-classes($inlineList, $prefix) {
     @each$item in $inlineList{
        .#{$prefix}-#{nth($item, 1)} {
            @include inline-image(nth($item, 2));
        }
    }
}
@mixin sprite-classes($spriteList, $prefix) {
     @each$item in $spriteList{
        .#{$prefix}-#{nth($item, 1)} {
            display: inline-block;
            @include sprite(nth($item, 2));
        }
    }
}
